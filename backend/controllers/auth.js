const User = require("../models/User");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken")
const createError = require("../utils/error");

const register = async (req,res,next)=>{
    try{
        const salt = bcrypt.genSaltSync(10);
        const hash = bcrypt.hashSync(req.body.password,salt)

        const newUser = new User({
            username: req.body.username,
            email: req.body.email,
            password: hash
        });

        await newUser.save();
        res.status(200).send("User has been created.")
    }catch(err){
        next(err)
    }
}


const login = async (req,res,next)=>{
    try{
       const user = await User.findOne({username:req.body.username});
       if(!user) return next(createError(404,"User not found!"));

       const isPasswordCorrect = await bcrypt.compare(req.body.password, user.password)
       if(!isPasswordCorrect) return next(createError(400,"Wrong password or username!"))

       const token =  jwt.sign({id: user._id, isAdmin: user.isAdmin}, process.env.JWT);  // as we want if the user is admin only then he can perform CRUD operation in hotels

       const {password, isAdmin, ...otherDetails} = user._doc    //object destructuring

       res.cookie("access_token",token,{   //name of the cookie is 'access_token' & value of the cookie is 'token' which is generated by jwt
        httpOnly:true,      //itensures that the cookie is only accessible through HTTP(S) requests and cannot be accessed by JavaScript running in the browser, which increases the security
       })
       .status(200).json({...otherDetails})   // as we don't want to see password & isAdmin in our response
    }catch(err){
        next(err)
    }
}

module.exports = {register,login};